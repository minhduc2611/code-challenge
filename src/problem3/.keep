``- You should explicitly state the issues and explain how to improve them.
  - sortedBalances
- Computational inefficiencies and anti-patterns

1. Magic numbers at line 35
- Issue: magic number make it hard to understand its meaning
```js
switch (blockchain) {
    case "Osmosis":
    return 100;
    case "Ethereum":
    return 50;
    case "Arbitrum":
    return 30;
    case "Zilliqa":
    return 20;
    case "Neo":
    return 20;
    default:
    return -99;
```
- Improvement: all numbers must be store in variables or enums
2. console.err at line 28

- Issue: Using console.err instead of console.error.
- Improvement: use console.error.

3. lhsPriority not defined at line 52

- Issue: Using lhsPriority instead of balancePriority.

```js
 const sortedBalances = useMemo(() => {
    return balances
      .filter((balance: WalletBalance) => {
        const balancePriority = getPriority(balance.blockchain);
        if (lhsPriority > -99) {
          if (balance.amount <= 0) {
            return true;
          }
        }
        return false;
      })
```

- Improvement: use balancePriority, like this `if (balancePriority > -99) {`

4. Code are not optimized from line 49 to 75

```js
const sortedBalances = useMemo(() => {
  return balances
    .filter((balance: WalletBalance) => {
      const balancePriority = getPriority(balance.blockchain);
      if (balancePriority > DEFAULT_PRIORITY) {
        if (balance.amount <= 0) {
          return true;
        }
      }
      return false;
    })
    .sort((lhs: WalletBalance, rhs: WalletBalance) => {
      const leftPriority = getPriority(lhs.blockchain);
      const rightPriority = getPriority(rhs.blockchain);
      if (leftPriority > rightPriority) {
        return -1;
      } else if (rightPriority > leftPriority) {
        return 1;
      }
    });
}, [balances, priceMap]);
```

- Issue: the written code have unnecessary returns (like true/false, 1/-1), can be shorten
- Improvement: shorten the code

5. formattedBalances at line 69

- Issue: The formattedBalances array is computed but not used, should be remove.
  However, I am thinking you are potentially trying to use formattedBalances in this code.

```js
const rows = sortedBalances.map(
  (balance: FormattedWalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    return (
      <WalletRow
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.formatted}
      />
    );
  }
);
```

- Improvement: combine formattedBalances's and row's logic

5. Risk of null exception

```
const usdValue = prices[balance.currency] * balance.amount;
```

- Issue: in this code, prices might be an array, not a map
- Improvement:
  Define response type of `Datasource.getPrices()`.
  Add null check or default value
  Naming convention: if `prices` is a map, rename to `priceMap`

```js
async getPrices(): Promise<PriceMap> {
    const response = await axios.get<PriceMap>(this.dataUrl);
    return response.data
}

const rows = sortedBalances.map(
    (balance: FormattedWalletBalance, index: number) => {
      const currency = balance.currency;
      const amount = +priceMap[currency] || 0;
      const usdValue = amount * balance.amount;
      return (
        <WalletRow
          className={classes.row}
          key={index}
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      );
    }
  );
```

6. `any` is bad at line 32

```js
const getPriority = (blockchain: any): number => {
  switch (blockchain) {
    case "Osmosis":
      return 100;
    default:
      return -99;
  }
};
```

- Issue: `any` keyword is not safe and readable
- Improvement: provide sufficient type for all unit of code

7. getting data from API in useEffect need improvement at line 23

```js
  useEffect(() => {
    const datasource = new Datasource("https://interview.switcheo.com/prices.json");
    datasource.getPrices()
      .then((prices) => {
        setPriceMap(prices);
      })
      .catch((error) => {
        console.error(error);
      });
  }, []);
```
- Issue: useEffect, set state in a component is not really optimized, there are no reusabilities, introducing complex patterns of code.
- Improvement: use global state management system, fully async api call supported like Redux, Recoil, and Zustand.

8. `Then` method 

```js
  useEffect(() => {
    const datasource = new Datasource("https://interview.switcheo.com/prices.json");
    datasource.getPrices()
      .then((prices) => {
        setPriceMap(prices);
      })
      .catch((error) => {
        console.error(error);
      });
  }, []);
```
- Issue: `then()` might introduce callback hell that makes the code harder to read and maintain
- Improvement: Use async/await, which is generally considered more readable, maintainable, linear and easier to work with compared to using .then() 


9. `index` as key is consider bad practice
```jsx
<WalletRow
    key={index}
    className={classes.row}
    amount={balance.amount}
    usdValue={usdValue}
    formattedAmount={formatted}
/>
```
- Issue: once the list get larger, react will rerender every single item as keys are changed
- Improvement: provide key with item.key or any unique string that the item has

